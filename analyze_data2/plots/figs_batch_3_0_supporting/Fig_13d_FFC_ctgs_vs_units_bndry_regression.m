function [wrkspc_buffer, group, out] = Fig_13d_FFC_ctgs_vs_units_bndry_regression(wrkspc_buffer, sfc_mode, perm_mode,curr_stage_sfc,curr_stage_sp,opts_exclude,opts_pls,convert_to_bri)
% This code works with the results of permutation tests
% Tests differences in Amp & Phase across category schemes.
% Data should be generated by run_analysis.m AND with:
%     sfc_mode = *.?????1
%     OR, equivalently, folders ending in _permu

%% Setup params 


% sfc_mode =  2.201901101;
% sfc_mode =  2.251111100;
% sfc_mode =  2.201711101;
% perm_mode = 2.201911101;
% sfc_mode = 2.201911101;
% sfc_mode = 2.241711102;
% sfc_mode = 2.2417111;
% sfc_mode = 2.2517111;
% sfc_mode = 2.251711103;
% sfc_mode = 2.271711101;
% perm_mode = 5;
% sfc_mode = 41.6018111;
% perm_mode = 41.6018111;
% sfc_mode  = 52.770201001;
% perm_mode = 52.770201001;





    % Pls switches
    freqband_stats = [16 20];
    freqband_stats_perm = [16 20];
%     freqband_stats = [1 10];
%     freqband_stats_perm = [1 10];
%     freqband_stats = [10 12];
%     freqband_stats_perm = [9 11];
%     freqband_stats_perm = [8 10];
%     freqband_stats_perm = [10 12];
%     freqband_stats = [30 40];
%     freqband_stats_perm = [30 40];
%     freqband_stats_perm = [80 100];




    % Permutation test options
    opts_perm = Opts_Perm;
    opts_perm.do_bh0 = 1;
    opts_perm.do_phi = 0;
    opts_perm.split_plusminus = 0;
    
    % Plotting options
    paperfig_mode = 1;
    opts_PM3Dcs.paperfig_mode=paperfig_mode;
    opts_PM3Dcs.stats_mode = 0;
    opts_PM3Dsp.paperfig_mode=paperfig_mode;
    opts_PSC.paperfig_mode = paperfig_mode;
    opts_PSC.remove_dependent = 0;
    
% Plot switches
plot_on_spect = 1;
plot_on_spectrogram = 0;
plot_on_scatter = 0;
plot_on_bargraph = 0;

groupmode = 0;   % 0-Use default grouping (all pairs, enumerate over ctgs);
                 % 1-Group based on permutation test output for diff.
                 % 2-Group based on permutation test output all.
    swap_mode = 0;

group_do_merge = 0;
    grouppmerge_do_percent = 1;

        
% Load pls
[wrkspc_buffer, out_pls] = load_pls(wrkspc_buffer,sfc_mode,curr_stage_sfc,freqband_stats,opts_exclude,opts_pls);
pls = out_pls.pls;
pls_stats = out_pls.pls_stats;
abscissa = out_pls.abscissa;
abscissa2 = out_pls.abscissa2;
bad_any = out_pls.bad_any;
funames1D = out_pls.funames1D;
mypairs = out_pls.mypairs;
group0 = out_pls.group;
sfc_mode = out_pls.sfc_mode;
clear out_pls



[~, sfc_subgroups] = decode_sfc_mode(sfc_mode);
[fname_suffix, do_adjacent, ctgsetli_mode, thinning_mode, tapers_mode, baseline_subtract, permutation_test, ue_pairs, coh_debias_mode, do_partial_coherence, ctgsetli_mode2] = build_sfcmode(sfc_mode, sfc_subgroups);

if convert_to_bri && ctgsetli_mode == 7
    pls_bnd = pls(:,:,1:4); pls_nbnd = pls(:,:,5:8);
    pls_bri = (pls_bnd - pls_nbnd) ./ (pls_nbnd + pls_bnd);
    pls = pls_bri;
    
    pls_bnd = pls_stats(:,1:4); pls_nbnd = pls_stats(:,5:8);
    pls_bri = (pls_bnd - pls_nbnd) ./ (pls_nbnd + pls_bnd);
    pls_stats = pls_bri;
    
    group0= group0(1:4);
    i=0;
    i=i+1; group0(i).legend = 'Cat/Dog BRI';
    i=i+1; group0(i).legend = 'Cog/Dat BRI';
    i=i+1; group0(i).legend = 'Cat/Dog Irr BRI';
    i=i+1; group0(i).legend = 'Cog/Dat Irr BRI';
end

% pls = pls * -1;
% pls_stats = pls_stats * -1;

% Group based on perm_mode
if ~exist('group','var')
    switch groupmode
        case 0
            % Use default grouping (all pairs, enumerate over ctgs)
            group = group0;
            sp = ~bad_any(:);

        case 1
            % Load sp's
            [wrkspc_buffer, out_perm] = load_pr(wrkspc_buffer,perm_mode,curr_stage_sp,freqband_stats_perm,bad_any,opts_perm,opts_exclude);
            sp = out_perm.sig_cells;
            
            % Load bads perm
            [bad_any_perm] = load_bads(perm_mode,curr_stage_sp,opts_exclude,wrkspc_buffer.currmd.md,out_perm.mypairs,out_perm.funames1D);
            
            % Map sp's as needed
            [sp] = map_sp(perm_mode, sfc_mode,out_perm.mypairs,mypairs,sp,wrkspc_buffer.currmd.md,bad_any_perm,bad_any);

            % Create group template
            mycrit = [2*ones(1,size(sp,2))];
            grt = group0(1);
            grt.criteria = mycrit; grt.criteria_alt = []; grt.criteria_sfc = []; grt.ctgs = 1;

            % Run a simple test
            clear group
            i=0;
            group = group0;
            for i = 1:length(group)
                group(i).criteria = 2*ones(1,size(sp,2));
                group(i).criteria(group(i).ctgs) = 1;
            end
            
            % Calculate legend entries
            group = group.query_legend(group0);


    end
end

% Load data into groups
group = get_grouped_cells_and_data(group,sp,pls,abscissa,mypairs,bad_any,opts_pls.plotmode,freqband_stats,funames1D,abscissa2);

if group_do_merge
    % Flip if ctgsetli mode = 4 or 5.
    temp=1:length(group);
    N=length(group);
    temp=flipud(reshape(1:N,2,floor(N/2)));
    temp=temp(:);
    group = grouppairs_merge(group(temp),opts_pls.perm2pls_dophi,grouppmerge_do_percent);
end

% Test Plot groups, at last
opts_PM3D = {'do_mean',1,'do_zscore',0,'showErrorbars',1};
if plot_on_spect
    
    
    inds = 1:length(group);

    if get_iscromer && groupmode == 0
        if length(group) > 5
            inds=[1:4,9,10];
        else
            inds=[1,2,5];
        end
    end
            
%     inds = [1:2,9:10];
%     inds = [9:12];
    figure;
    [h1] = plot_matrix3D_custstruct([],group(inds),opts_PM3D,opts_PM3Dcs);
    
end

if 0
    %%
    figure;
    inds = [1,2,3,4,9,10];
    [h1] = plot_matrix3D_custstruct([],group(inds),opts_PM3D);
%     figure;
%     inds = 3:4;
%     [h1] = plot_matrix3D_custstruct([],group(inds),opts_PM3D);

end

% Test bargraph

if plot_on_bargraph
    fign; [h1, h, p, out.PSC] = plot_stats_custstruct(group,opts_PSC);
end


% Test Plot scattergroups

if plot_on_scatter

    figure; % subplot(221); 
    indx = 1;
    indy = 5;
    plot_scatterpls_and_groups(pls_stats,group([1,5]),bad_any,indx,indy,group0)
    
    
end

do_pca = 0;
if do_pca
   [coeff,score,latent] = princomp([x(:),y(:)]);
    ax1 = coeff(:,1);% *sqrt(latent(1));
    ax2 = coeff(:,2);% *sqrt(latent(2));
    hold on; plot([0 coeff(1,1)],[0 coeff(2,1)],'r','LineWidth',2);
    hold on; plot([0 coeff(1,2)],[0 coeff(2,2)],'r','LineWidth',2); 
end


% %% Slope test
% if plot_Sch_sens
%     pls_stats2 = pls_stats;
%     pls_stats2(:,group(3).ctgs) = pls_stats(:,group(3).ctgs) ./ pls_stats(:,group(1).ctgs);
%     figure; % subplot(221); 
%     plott_fit(pls_stats2(~bad_any,group(1).ctgs),pls_stats2(~bad_any,group(3).ctgs),'k.');
%     hold on; plot_scattergroups(pls_stats2(~bad_any,group(1).ctgs),pls_stats2(~bad_any,group(3).ctgs),[group(1),group(3)],~bad_any);
%     xlabel('FFC pls(:,1)'); ylabel('FFC pls(:,2)');
% end


% Package outputs

% Package data if this script is called by a parent function
% if is_calledby
    out.wrkspc_buffer = wrkspc_buffer;
    out.group = group;
    out.bad_any = bad_any;
    out.pls = pls;
    out.pls_stats = pls_stats;
    out.abscissa = abscissa;
    out.mypairs = mypairs;
% end




end