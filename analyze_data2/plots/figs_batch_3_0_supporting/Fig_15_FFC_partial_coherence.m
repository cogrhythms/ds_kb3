function [wrkspc_buffer, group, out] = Fig_15_FFC_partial_coherence(wrkspc_buffer, sfc_mode, perm_mode,curr_stage_sfc,curr_stage_sp,opts_exclude,opts_pls,opts_perm)
% This code works with the results of permutation tests
% Tests differences in Amp & Phase across category schemes.
% Data should be generated by run_analysis.m AND with:
%     sfc_mode = *.?????1
%     OR, equivalently, folders ending in _permu

%% Setup params 


% Defaults
groupmode = 2;   % 0-Use default grouping (all pairs, enumerate over ctgs);
                 % 1-Permutation test; raw FFC using permdat2pls (no diff)
                 % 2-Permutation test; diffed data (perm2pls or permdat2pls)
                 % 3-Permutation test; % change
swap_mode = 0;                 
                 
% If in boundary trial mode, do % change
if opts_pls.permdat2pls && opts_pls.do_diff && groupmode > 0
    groupmode = 3;
end

% If in ctgsetli mode 4, do 50% morphs analysis
[~, sfc_subgroups] = decode_sfc_mode(sfc_mode);
[~, ~, ctgsetli_mode] = build_sfcmode(sfc_mode, sfc_subgroups);
if ctgsetli_mode == 4
    do_swap = 1;
    swap_map = [1,2; 3,4];
    swap_map_pref = swap_map;
else
    do_swap = 0;
end

if groupmode == 3
    do_percent_change = 1;
else
    do_percent_change = 0;
end
                 
sort_on = 0;
if groupmode == 1
    sort_on = 0;
end


group_do_merge = 0;
    grouppmerge_do_percent = 1;
    

    % Pls switches
    freqband_stats = [16 20];
    freqband_stats_perm = [16 20];


    
    % Plotting options
    paperfig_mode = 1;
    opts_PM3Dcs.paperfig_mode=paperfig_mode;
    opts_PM3Dcs.stats_mode = 0;
    opts_PM3Dsp.paperfig_mode=paperfig_mode;
    
    
% Plot switches
plot_on_spect = 1;
plot_on_spectrogram = 0;
plot_on_scatter = 0;
plot_on_bargraph = 1;


        
% Load pls
[wrkspc_buffer, out_pls] = load_pls(wrkspc_buffer,sfc_mode,curr_stage_sfc,freqband_stats,opts_exclude,opts_pls);
pls = out_pls.pls;
pls_stats = out_pls.pls_stats;
abscissa = out_pls.abscissa;
abscissa2 = out_pls.abscissa2;
bad_any = out_pls.bad_any;
funames1D = out_pls.funames1D;
mypairs = out_pls.mypairs;
group0 = out_pls.group;
sfc_mode = out_pls.sfc_mode;

if opts_pls.do_diff || opts_pls.perm2pls_allow_signed     % If taking difference, reverse for boundary
    pls=pls*-1; pls_stats=pls_stats*-1;
end


if do_percent_change
    opts_pls2 = opts_pls;
    opts_pls2.permdat2pls = 1;
    opts_pls2.do_diff = 0;
    [wrkspc_buffer, out_pls] = load_pls(wrkspc_buffer,sfc_mode,curr_stage_sfc,freqband_stats,opts_exclude,opts_pls2);
    pls2 = out_pls.pls;
    pls_stats2 = out_pls.pls_stats;

    % Take 100%'s only
    pls2 = pls2(:,:,1:2:end);
    pls_stats2 = pls_stats2(:,1:2:end);

    % % Get as percent change (bad!!! this disregards our cell groupings!)
    % sz = size(pls);
    % pls2 = repmat(mean(pls2,2),[1,sz(2),1,1,1,1,1]);
    % pls_stats2 = repmat(mean(pls_stats2,1),[sz(2),1,1,1,1,1]);

end


% Load sorting info

% Load sp's
[wrkspc_buffer, out_perm] = load_pr(wrkspc_buffer,perm_mode,curr_stage_sp,freqband_stats_perm,bad_any,opts_perm,opts_exclude);
sp = out_perm.sig_cells;

% Load bads perm
[bad_any_perm] = load_bads(perm_mode,curr_stage_sp,opts_exclude,wrkspc_buffer.currmd.md,out_perm.mypairs,out_perm.funames1D);

% Map sp's as needed
[sp] = map_sp(perm_mode, sfc_mode,out_perm.mypairs,mypairs,sp,wrkspc_buffer.currmd.md,bad_any_perm,bad_any);

if groupmode == 1   % Only for raw mode would we want to sort.
    % Sort PLS
    [IA] = ind_pls(out_perm.Cave1(:,:,1),out_perm.Cave2(:,:,1),out_perm.abscissa,freqband_stats);  % Sch A
    [IB] = ind_pls(out_perm.Cave1(:,:,2),out_perm.Cave2(:,:,2),out_perm.abscissa,freqband_stats);  % Sch B

    sz = size(out_pls.pls);
    pls_sort = zeros([sz(1),sz(2),4]);

    % Sch A Relevant [1,2]; arrange into "Roy" type structure.
    pls_sort(:,:,1:2) = sort_index_pls_wrapper(out_pls.pls(:,:,1),out_pls.pls(:,:,2),IA,sort_on);
    pls_sort(:,:,3:4) = sort_index_pls_wrapper(out_pls.pls(:,:,3),out_pls.pls(:,:,4),IB,sort_on);

    pls(:,:,1:4) = pls_sort;
    
end


[~, sfc_subgroups] = decode_sfc_mode(sfc_mode);
[fname_suffix, do_adjacent, ctgsetli_mode, thinning_mode, tapers_mode, baseline_subtract, permutation_test, ue_pairs, coh_debias_mode, do_partial_coherence, ctgsetli_mode2] = build_sfcmode(sfc_mode, sfc_subgroups);

% pls = pls * -1;
% pls_stats = pls_stats * -1;

% Group based on perm_mode
if ~exist('group','var')
    switch groupmode
        case 0
            % Use default grouping (all pairs, enumerate over ctgs)
            group = group0;
            sp = ~bad_any(:);
            group = group(1:2);

        case 1
            
            % Create group template
            mycrit = [2*ones(1,size(sp,2))];
            grt = group0(1);
            grt.criteria = mycrit; grt.criteria_alt = []; grt.criteria_sfc = []; grt.ctgs = 1;

            % Run a simple test
            clear group
            i=0;
            i=i+1; group(i)=grt; group(i).criteria(1:2)=[1 2]; group(i).ctgs=1;   % Ctg1-2 deciders
            i=i+1; group(i)=grt; group(i).criteria(1:2)=[1 2]; group(i).ctgs=2;   % Ctg1-2 non-deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[0 2]; group(i).ctgs=1;   % Ctg1-2 deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[0 2]; group(i).ctgs=2;   % Ctg1-2 non-deciders
            i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 1]; group(i).ctgs=3;   % Ctg1-2 deciders
            i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 1]; group(i).ctgs=4;   % Ctg1-2 non-deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 0]; group(i).ctgs=3;   % Ctg1-2 deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 0]; group(i).ctgs=4;   % Ctg1-2 non-deciders


%                 % Run a simple test
%                 clear group
%                 i=0;
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 2]; group(i).ctgs=1;   % Ctg1-2 deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 2]; group(i).ctgs=2;   % Ctg1-2 non-deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 2]; group(i).ctgs=3;   % Ctg1-2 deciders
%                 i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 2]; group(i).ctgs=4;   % Ctg1-2 non-deciders
            
            % Calculate legend entries
            group = group.query_legend(group0);
            
        case {2,3}
            
            % Create group template
            mycrit = [2*ones(1,size(sp,2))];
            grt = group0(1);
            grt.criteria = mycrit; grt.criteria_alt = []; grt.criteria_sfc = []; grt.ctgs = 1;

                clear group
                i=0;
                i=i+1; group(i)=grt; group(i).criteria(1:2)=[1 2]; group(i).ctgs=1;   % Ctg1-2 deciders
                i=i+1; group(i)=grt; group(i).criteria(1:2)=[0 2]; group(i).ctgs=1;   % Ctg1-2 non-deciders
                i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 1]; group(i).ctgs=2;   % Ctg1-2 deciders
                i=i+1; group(i)=grt; group(i).criteria(1:2)=[2 0]; group(i).ctgs=2;   % Ctg1-2 non-deciders
                
                
%                     % For ctgsetli mode 7 100%
%                 clear group
%                 i=0;
%                 i=i+1; group(i)=grt; group(i).criteria(5:6)=[1 2]; group(i).ctgs=5;   % Ctg1-2 deciders
%                 i=i+1; group(i)=grt; group(i).criteria(5:6)=[0 2]; group(i).ctgs=5;   % Ctg1-2 non-deciders
%                 i=i+1; group(i)=grt; group(i).criteria(5:6)=[2 1]; group(i).ctgs=6;   % Ctg1-2 deciders
%                 i=i+1; group(i)=grt; group(i).criteria(5:6)=[2 0]; group(i).ctgs=6;   % Ctg1-2 non-deciders
            
            % Calculate legend entries
            group = group.query_legend(group0);
            
            
            if do_swap
                group = group_swap.crit_move (group,swap_map);      % THIS BUGGERS UP WHEN USING CTG 11
                group = group_swap.ctgs (group,swap_map);
            end
    end
end




if do_percent_change
    group2 = get_grouped_cells_and_data(group,sp,pls2,abscissa,mypairs,bad_any,opts_pls.plotmode,freqband_stats,funames1D,abscissa2);
end

% Load data into groups
group = get_grouped_cells_and_data(group,sp,pls,abscissa,mypairs,bad_any,opts_pls.plotmode,freqband_stats,funames1D,abscissa2);


if do_percent_change
    group_temp = [group; group2];   % Alternate group and group2 entries
    group_temp = group_temp(:)';
    group = grouppairs_merge(group_temp,opts_pls.perm2pls_dophi,2);
    for i = 1:length(group);group(i).data_name = '% change'; end
    group = group.query_legend(group0);
end

if group_do_merge
    % Flip if ctgsetli mode = 4 or 5.
    temp=1:length(group);
    N=length(group);
    temp=flipud(reshape(1:N,2,floor(N/2)));
    temp=temp(:);
    group = grouppairs_merge(group(temp),opts_pls.perm2pls_dophi,grouppmerge_do_percent);
end

% Test Plot groups, at last
opts_PM3D = {'do_mean',1,'do_zscore',0,'showErrorbars',1};
if plot_on_spect
    
    
    inds = 1:length(group);

    if get_iscromer && groupmode == 0
        if length(group) > 5
            inds=[1:4,9,10];
        else
            inds=[1,2,5];
        end
    end
            
%     inds = [1:2,9:10];
%     inds = [9:12];
    figure;
    [h1] = plot_matrix3D_custstruct([],group(inds),opts_PM3D,opts_PM3Dcs);
    
end

if 0
    %%
    figure;
    inds = [1,2,3,4,9,10];
    [h1] = plot_matrix3D_custstruct([],group(inds),opts_PM3D);
%     figure;
%     inds = 3:4;
%     [h1] = plot_matrix3D_custstruct([],group(inds),opts_PM3D);

end

% Test bargraph

if plot_on_bargraph
    fign; [h1, h, p, out.PSC] = plot_stats_custstruct(group,opts_PSC);
end


% Test Plot scattergroups

if plot_on_scatter

    figure; % subplot(221); 
    indx = 1;
    indy = 5;
    plot_scatterpls_and_groups(pls_stats,group([1,5]),bad_any,indx,indy,group0)
    
    
end

do_pca = 0;
if do_pca
   [coeff,score,latent] = princomp([x(:),y(:)]);
    ax1 = coeff(:,1);% *sqrt(latent(1));
    ax2 = coeff(:,2);% *sqrt(latent(2));
    hold on; plot([0 coeff(1,1)],[0 coeff(2,1)],'r','LineWidth',2);
    hold on; plot([0 coeff(1,2)],[0 coeff(2,2)],'r','LineWidth',2); 
end


% %% Slope test
% if plot_Sch_sens
%     pls_stats2 = pls_stats;
%     pls_stats2(:,group(3).ctgs) = pls_stats(:,group(3).ctgs) ./ pls_stats(:,group(1).ctgs);
%     figure; % subplot(221); 
%     plott_fit(pls_stats2(~bad_any,group(1).ctgs),pls_stats2(~bad_any,group(3).ctgs),'k.');
%     hold on; plot_scattergroups(pls_stats2(~bad_any,group(1).ctgs),pls_stats2(~bad_any,group(3).ctgs),[group(1),group(3)],~bad_any);
%     xlabel('FFC pls(:,1)'); ylabel('FFC pls(:,2)');
% end


% Package outputs

% Package data if this script is called by a parent function
% if is_calledby
    out.wrkspc_buffer = wrkspc_buffer;
    out.group = group;
    out.bad_any = bad_any;
    out.pls = pls;
    out.pls_stats = pls_stats;
    out.abscissa = abscissa;
    out.mypairs = mypairs;
% end




end


function Cavepref_out = sort_index_pls_wrapper(Cave1,Cave2,I,sort_on)
    
    if sort_on
        Cavepref_out = sort_index_pls(Cave1,Cave2,I);
    else
        
        Cavepref_out = cat(4,Cave1, Cave2);

    end

end

